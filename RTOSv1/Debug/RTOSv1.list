
RTOSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00001364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00001364  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800035c  0800035c  00001364  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800035c  08000364  00001364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0000135c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000364  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000364  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003cd  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000155  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000018b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000044  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db18  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005f8  00000000  00000000  0000f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f24e  00000000  00000000  0000fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005ecc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  0005ed08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0005edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000344 	.word	0x08000344

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000344 	.word	0x08000344

080001d4 <initGPIO>:
volatile uint32_t systick_ms = 0;		// holds elapsed ms


// FUNCTIONS ----------------------------------------------------------------------------------------------------------------------------------------

void initGPIO(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	// |= is bitwise OR, compares bits and sets if either is 1
//	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	//GPIOAEN is a bit-mask that sets bit 0 to 1

	// or more bare metal, 1U is just integer '1', U means unsigned INT
	RCC->AHB1ENR |= (1U << 0);		// then we're shifting it 0 places because we want to write 1 to bit 0
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <initGPIO+0x34>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <initGPIO+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30

	//Now set pin 5 as output
	// first clear the value in pin 10 and 11 by writing 11 to it then negating
	GPIOA->MODER &= ~(3U << 10);
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <initGPIO+0x38>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <initGPIO+0x38>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
	// shift decimal 3 (b11) 10 places to set bits 10 and 11 as b11, then negate it, then AND it.
	// this preserves the value of all other bits in the register but clears bits 10 and 11 ready to be set.

	GPIOA->MODER |=(1U << 10); // then set bit 10 to 1, so MODE5 is now 01 which sets PA_5 as an output
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <initGPIO+0x38>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a05      	ldr	r2, [pc, #20]	@ (800020c <initGPIO+0x38>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <initSysTick>:

void initSysTick(uint32_t time_base){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	SYST_RVR = time_base - 1; // load tick time into RVR
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <initSysTick+0x28>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3b01      	subs	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	SYST_CVR = 0;			// write value to CVR to clear it
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <initSysTick+0x2c>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
	SYST_CSR = (1U << 0) | (1U << 1) | (1U << 2);	// enable, tick-int and clk-source set
 8000226:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <initSysTick+0x30>)
 8000228:	2207      	movs	r2, #7
 800022a:	601a      	str	r2, [r3, #0]

}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000e014 	.word	0xe000e014
 800023c:	e000e018 	.word	0xe000e018
 8000240:	e000e010 	.word	0xe000e010

08000244 <SysTick_Handler>:

void SysTick_Handler(void){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0

	systick_ms++;		// each time interrupt triggered by systick (every ms) increment counter
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <SysTick_Handler+0x18>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	4a03      	ldr	r2, [pc, #12]	@ (800025c <SysTick_Handler+0x18>)
 8000250:	6013      	str	r3, [r2, #0]

}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	2000001c 	.word	0x2000001c

08000260 <main>:

}


int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	initGPIO();
 8000266:	f7ff ffb5 	bl	80001d4 <initGPIO>
	initSysTick(16000000 / 1000);	//set a 1 ms tick at 16MHz
 800026a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800026e:	f7ff ffcf 	bl	8000210 <initSysTick>

	uint32_t start_time = systick_ms;
 8000272:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <main+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	607b      	str	r3, [r7, #4]

	while(1){

		uint32_t elapsed_time = systick_ms - start_time;
 8000278:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x40>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	1ad3      	subs	r3, r2, r3
 8000280:	603b      	str	r3, [r7, #0]

		if(elapsed_time > 2000){
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000288:	d9f6      	bls.n	8000278 <main+0x18>
			// execute task
			GPIOA->ODR ^= (1U << 5);
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <main+0x44>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <main+0x44>)
 8000290:	f083 0320 	eor.w	r3, r3, #32
 8000294:	6153      	str	r3, [r2, #20]
			start_time = systick_ms;
 8000296:	4b02      	ldr	r3, [pc, #8]	@ (80002a0 <main+0x40>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	607b      	str	r3, [r7, #4]
	while(1){
 800029c:	e7ec      	b.n	8000278 <main+0x18>
 800029e:	bf00      	nop
 80002a0:	2000001c 	.word	0x2000001c
 80002a4:	40020000 	.word	0x40020000

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	@ (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	@ (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002da:	f7ff ffc1 	bl	8000260 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000020 	.word	0x20000020

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	@ (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	@ (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	@ (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

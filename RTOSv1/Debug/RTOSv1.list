
RTOSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000000  080004f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  080004f4  00002048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000482  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001aa  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000058  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db1e  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000068f  00000000  00000000  0000f746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f295  00000000  00000000  0000fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005f06a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000148  00000000  00000000  0005f0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0005f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d4 	.word	0x080004d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004d4 	.word	0x080004d4

080001d4 <initGPIO>:
} TaskType ;

TaskType TaskList[TOTAL_TASKS];		// array to hold tasks, priority determined by order


void initGPIO(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1U << 0);				// LED
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <initGPIO+0x34>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000208 <initGPIO+0x34>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(3U << 10);
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <initGPIO+0x38>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <initGPIO+0x38>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U << 10);
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <initGPIO+0x38>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a05      	ldr	r2, [pc, #20]	@ (800020c <initGPIO+0x38>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <initSysTick>:

void initSysTick(uint32_t time_base){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	SYST_RVR = time_base - 1; // load tick time into RVR
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <initSysTick+0x28>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3b01      	subs	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
	SYST_CVR = 0;			// write value to CVR to clear it
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <initSysTick+0x2c>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
	SYST_CSR = (1U << 0) | (1U << 1) | (1U << 2);	// enable, tick-int and clk-source set
 8000226:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <initSysTick+0x30>)
 8000228:	2207      	movs	r2, #7
 800022a:	601a      	str	r2, [r3, #0]

}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000e014 	.word	0xe000e014
 800023c:	e000e018 	.word	0xe000e018
 8000240:	e000e010 	.word	0xe000e010

08000244 <SysTick_Handler>:

void SysTick_Handler(void){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0

	systick_ms++;		// each time interrupt triggered by systick (every ms) increment counter
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <SysTick_Handler+0x18>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	4a03      	ldr	r2, [pc, #12]	@ (800025c <SysTick_Handler+0x18>)
 8000250:	6013      	str	r3, [r2, #0]

}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	2000001c 	.word	0x2000001c

08000260 <scheduler>:

void scheduler(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0


	static uint32_t last_time = 0;
	uint32_t now = systick_ms;
 8000266:	4b2b      	ldr	r3, [pc, #172]	@ (8000314 <scheduler+0xb4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	60bb      	str	r3, [r7, #8]
	uint32_t time_difference = now - last_time;
 800026c:	4b2a      	ldr	r3, [pc, #168]	@ (8000318 <scheduler+0xb8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	607b      	str	r3, [r7, #4]
	last_time = now;
 8000276:	4a28      	ldr	r2, [pc, #160]	@ (8000318 <scheduler+0xb8>)
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	6013      	str	r3, [r2, #0]

	uint8_t i = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	73fb      	strb	r3, [r7, #15]
	for (i=0; i<TOTAL_TASKS; i++){	// for each task
 8000280:	2300      	movs	r3, #0
 8000282:	73fb      	strb	r3, [r7, #15]
 8000284:	e03d      	b.n	8000302 <scheduler+0xa2>

		if(TaskList[i].elapsedTime >= TaskList[i].period){	// if elapsed time > period
 8000286:	7bfa      	ldrb	r2, [r7, #15]
 8000288:	4924      	ldr	r1, [pc, #144]	@ (800031c <scheduler+0xbc>)
 800028a:	4613      	mov	r3, r2
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	4413      	add	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	440b      	add	r3, r1
 8000294:	3304      	adds	r3, #4
 8000296:	6819      	ldr	r1, [r3, #0]
 8000298:	7bfa      	ldrb	r2, [r7, #15]
 800029a:	4820      	ldr	r0, [pc, #128]	@ (800031c <scheduler+0xbc>)
 800029c:	4613      	mov	r3, r2
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	4413      	add	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	4403      	add	r3, r0
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d313      	bcc.n	80002d4 <scheduler+0x74>

			TaskList[i].TaskPtr();		// call the tasks function
 80002ac:	7bfa      	ldrb	r2, [r7, #15]
 80002ae:	491b      	ldr	r1, [pc, #108]	@ (800031c <scheduler+0xbc>)
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	3308      	adds	r3, #8
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4798      	blx	r3
			TaskList[i].elapsedTime = 0;	// reset elapsed time
 80002c0:	7bfa      	ldrb	r2, [r7, #15]
 80002c2:	4916      	ldr	r1, [pc, #88]	@ (800031c <scheduler+0xbc>)
 80002c4:	4613      	mov	r3, r2
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	4413      	add	r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	440b      	add	r3, r1
 80002ce:	3304      	adds	r3, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
		}
		TaskList[i].elapsedTime += time_difference;
 80002d4:	7bfa      	ldrb	r2, [r7, #15]
 80002d6:	4911      	ldr	r1, [pc, #68]	@ (800031c <scheduler+0xbc>)
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	440b      	add	r3, r1
 80002e2:	3304      	adds	r3, #4
 80002e4:	6819      	ldr	r1, [r3, #0]
 80002e6:	7bfa      	ldrb	r2, [r7, #15]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4419      	add	r1, r3
 80002ec:	480b      	ldr	r0, [pc, #44]	@ (800031c <scheduler+0xbc>)
 80002ee:	4613      	mov	r3, r2
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4403      	add	r3, r0
 80002f8:	3304      	adds	r3, #4
 80002fa:	6019      	str	r1, [r3, #0]
	for (i=0; i<TOTAL_TASKS; i++){	// for each task
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	3301      	adds	r3, #1
 8000300:	73fb      	strb	r3, [r7, #15]
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	2b02      	cmp	r3, #2
 8000306:	d9be      	bls.n	8000286 <scheduler+0x26>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c
 8000318:	20000044 	.word	0x20000044
 800031c:	20000020 	.word	0x20000020

08000320 <Task1>:

void Task1(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

	// do something

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <Task2>:


void Task2(void){
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0

	// do something

}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <Task3>:

void Task3(void){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

	// do something

}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <main>:

// MAIN LOOP --------------------------------------------------------------------------------------------

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

	// TASK ASSIGNMENT

	uint8_t i = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	71fb      	strb	r3, [r7, #7]

	// TASK 1 - PERIOD & FUNCTION
	TaskList[i].period = 1000;		// task 1 has a period of 1000 ms
 8000356:	79fa      	ldrb	r2, [r7, #7]
 8000358:	4933      	ldr	r1, [pc, #204]	@ (8000428 <main+0xdc>)
 800035a:	4613      	mov	r3, r2
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4413      	add	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	440b      	add	r3, r1
 8000364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000368:	601a      	str	r2, [r3, #0]
	TaskList[i].TaskPtr = &Task1;	// task 1s pointer points to Task1
 800036a:	79fa      	ldrb	r2, [r7, #7]
 800036c:	492e      	ldr	r1, [pc, #184]	@ (8000428 <main+0xdc>)
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	3308      	adds	r3, #8
 800037a:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <main+0xe0>)
 800037c:	601a      	str	r2, [r3, #0]
	TaskList[i].elapsedTime = 0;
 800037e:	79fa      	ldrb	r2, [r7, #7]
 8000380:	4929      	ldr	r1, [pc, #164]	@ (8000428 <main+0xdc>)
 8000382:	4613      	mov	r3, r2
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4413      	add	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	3304      	adds	r3, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
	i++;
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	3301      	adds	r3, #1
 8000396:	71fb      	strb	r3, [r7, #7]

	// TASK 2 - PERIOD & FUNCTION
	TaskList[i].period = 500;
 8000398:	79fa      	ldrb	r2, [r7, #7]
 800039a:	4923      	ldr	r1, [pc, #140]	@ (8000428 <main+0xdc>)
 800039c:	4613      	mov	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	4413      	add	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	440b      	add	r3, r1
 80003a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003aa:	601a      	str	r2, [r3, #0]
	TaskList[i].TaskPtr = &Task2;
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	491e      	ldr	r1, [pc, #120]	@ (8000428 <main+0xdc>)
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	3308      	adds	r3, #8
 80003bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <main+0xe4>)
 80003be:	601a      	str	r2, [r3, #0]
	TaskList[i].elapsedTime = 0;
 80003c0:	79fa      	ldrb	r2, [r7, #7]
 80003c2:	4919      	ldr	r1, [pc, #100]	@ (8000428 <main+0xdc>)
 80003c4:	4613      	mov	r3, r2
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	4413      	add	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	440b      	add	r3, r1
 80003ce:	3304      	adds	r3, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
	i++;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	3301      	adds	r3, #1
 80003d8:	71fb      	strb	r3, [r7, #7]

	// TASK 3 - PERIOD & FUNCTION
	TaskList[i].period = 2000;
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	4912      	ldr	r1, [pc, #72]	@ (8000428 <main+0xdc>)
 80003de:	4613      	mov	r3, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	4413      	add	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003ec:	601a      	str	r2, [r3, #0]
	TaskList[i].TaskPtr = &Task3;
 80003ee:	79fa      	ldrb	r2, [r7, #7]
 80003f0:	490d      	ldr	r1, [pc, #52]	@ (8000428 <main+0xdc>)
 80003f2:	4613      	mov	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	3308      	adds	r3, #8
 80003fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <main+0xe8>)
 8000400:	601a      	str	r2, [r3, #0]
	TaskList[i].elapsedTime = 0;
 8000402:	79fa      	ldrb	r2, [r7, #7]
 8000404:	4908      	ldr	r1, [pc, #32]	@ (8000428 <main+0xdc>)
 8000406:	4613      	mov	r3, r2
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	4413      	add	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	440b      	add	r3, r1
 8000410:	3304      	adds	r3, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]

	// INITIALIZE SYSTEM TIMER AND GPIO

	initGPIO();
 8000416:	f7ff fedd 	bl	80001d4 <initGPIO>
	initSysTick(16000000 / 1000);	//set a 1 ms tick at 16MHz
 800041a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800041e:	f7ff fef7 	bl	8000210 <initSysTick>


	while(1){

		scheduler();
 8000422:	f7ff ff1d 	bl	8000260 <scheduler>
 8000426:	e7fc      	b.n	8000422 <main+0xd6>
 8000428:	20000020 	.word	0x20000020
 800042c:	08000321 	.word	0x08000321
 8000430:	0800032f 	.word	0x0800032f
 8000434:	0800033d 	.word	0x0800033d

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	@ (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	@ (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	@ (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800046a:	f7ff ff6f 	bl	800034c <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	20000048 	.word	0x20000048

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	4d0d      	ldr	r5, [pc, #52]	@ (80004c4 <__libc_init_array+0x38>)
 8000490:	4c0d      	ldr	r4, [pc, #52]	@ (80004c8 <__libc_init_array+0x3c>)
 8000492:	1b64      	subs	r4, r4, r5
 8000494:	10a4      	asrs	r4, r4, #2
 8000496:	2600      	movs	r6, #0
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	4d0b      	ldr	r5, [pc, #44]	@ (80004cc <__libc_init_array+0x40>)
 800049e:	4c0c      	ldr	r4, [pc, #48]	@ (80004d0 <__libc_init_array+0x44>)
 80004a0:	f000 f818 	bl	80004d4 <_init>
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	10a4      	asrs	r4, r4, #2
 80004a8:	2600      	movs	r6, #0
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
